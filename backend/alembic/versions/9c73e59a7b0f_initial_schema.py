"""Initial schema

Revision ID: 9c73e59a7b0f
Revises: 
Create Date: 2025-04-08 17:50:46.716165

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel  # Add this import

# revision identifiers, used by Alembic.
revision: str = '9c73e59a7b0f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('locations',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('type', sa.Enum('CELLAR', 'OUTLET', 'WAREHOUSE', name='locationtype'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_locations_name'), 'locations', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('contact', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'MANAGER', 'STAFF', name='userrole'), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('wineskus',
    sa.Column('product_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('barcode', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('wine_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('vintage_year', sa.Integer(), nullable=False),
    sa.Column('producer', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('region', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('appellation', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('alcohol_content', sa.Float(), nullable=False),
    sa.Column('bottling_date', sa.DateTime(), nullable=True),
    sa.Column('price_bottle', sa.Float(), nullable=False),
    sa.Column('price_glass', sa.Float(), nullable=False),
    sa.Column('cost_price', sa.Float(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('grape_varieties', sa.JSON(), nullable=True),
    sa.Column('condition_notes', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_wineskus_product_code'), 'wineskus', ['product_code'], unique=True)
    op.create_index(op.f('ix_wineskus_wine_name'), 'wineskus', ['wine_name'], unique=False)
    op.create_table('storagelots',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('location_id', sa.Uuid(), nullable=False),
    sa.Column('lot_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('location_id', 'lot_name', name='unique_storage_lot')
    )
    op.create_index(op.f('ix_storagelots_lot_name'), 'storagelots', ['lot_name'], unique=False)
    op.create_table('movements',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('batch_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('sku_id', sa.Uuid(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('from_location_id', sa.Uuid(), nullable=True),
    sa.Column('to_location_id', sa.Uuid(), nullable=True),
    sa.Column('from_lot_id', sa.Uuid(), nullable=True),
    sa.Column('to_lot_id', sa.Uuid(), nullable=True),
    sa.Column('movement_type', sa.Enum('INBOUND', 'OUTBOUND', 'TRANSFER', 'DEPLETION', 'ADJUSTMENT', name='movementtype'), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('performed_by', sa.Uuid(), nullable=False),
    sa.Column('approved_by', sa.Uuid(), nullable=True),
    sa.Column('is_high_value', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['from_location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['from_lot_id'], ['storagelots.id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['sku_id'], ['wineskus.id'], ),
    sa.ForeignKeyConstraint(['to_location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['to_lot_id'], ['storagelots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_movements_batch_ref'), 'movements', ['batch_ref'], unique=False)
    op.create_table('stocks',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('sku_id', sa.Uuid(), nullable=False),
    sa.Column('lot_id', sa.Uuid(), nullable=True),
    sa.Column('location_id', sa.Uuid(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['storagelots.id'], ),
    sa.ForeignKeyConstraint(['sku_id'], ['wineskus.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('sku_id', 'lot_id', 'location_id', name='unique_stock')
    )
    # ### end Alembic commands ###

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('stocks')
    op.drop_index(op.f('ix_movements_batch_ref'), table_name='movements')
    op.drop_table('movements')
    op.drop_index(op.f('ix_storagelots_lot_name'), table_name='storagelots')
    op.drop_table('storagelots')
    op.drop_index(op.f('ix_wineskus_wine_name'), table_name='wineskus')
    op.drop_index(op.f('ix_wineskus_product_code'), table_name='wineskus')
    op.drop_table('wineskus')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_locations_name'), table_name='locations')
    op.drop_table('locations')
    # ### end Alembic commands ###